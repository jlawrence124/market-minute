
import { GoogleGenAI, Modality } from "@google/genai";
import { Source } from '../types';

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}
const ai = new GoogleGenAI({ apiKey: API_KEY });

export async function fetchSourcesForTickers(tickers: string[]): Promise<{ aggregatedContent: string; sources: Source[] }> {
  let aggregatedContent = "";
  const sources: Source[] = [];
  const uniqueUris = new Set<string>();

  for (const ticker of tickers) {
    const prompt = `Gather the latest significant news, SEC filings, analyst ratings, and short reports for the security ${ticker}. Provide a concise summary of the findings.`;
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        tools: [{ googleSearch: {} }],
      },
    });

    aggregatedContent += `\n\n--- Content for ${ticker} ---\n`;
    aggregatedContent += response.text;

    const groundingChunks = response.candidates?.[0]?.groundingMetadata?.groundingChunks;
    if (groundingChunks) {
      for (const chunk of groundingChunks) {
        if (chunk.web && chunk.web.uri && !uniqueUris.has(chunk.web.uri)) {
          sources.push({
            title: chunk.web.title || `Source for ${ticker}`,
            uri: chunk.web.uri,
          });
          uniqueUris.add(chunk.web.uri);
        }
      }
    }
  }
  return { aggregatedContent, sources };
}


export async function generatePodcastScript(context: string, tickers: string[]): Promise<string> {
  const prompt = `You are 'AI Market Minute by Schwab', an expert financial news podcaster working at the company Charles Schwab. 
  
  You MUST NOT acknowledge yourself as host.
  Your tone is professional, engaging, and insightful. 
  Create a short podcast script summarizing the provided financial intelligence for the following securities: ${tickers.join(', ')}.
  You MUST ONLY produce text that should be read aloud and NOT directions or placeholders for music.

  **CRITICAL FORMATTING RULE FOR STOCK TICKERS:**
  To ensure clear pronunciation by the text-to-speech engine, you MUST format all stock tickers in the following way:
  - Spell out each letter, separated by a period and a space. For example, 'GOOG' becomes 'G. O. O. G.'.
  - **Special rule for tickers with 4 or more identical consecutive letters:** To prevent the TTS from collapsing them, insert a comma to create a pause. For example, 'UUUU' becomes 'U. U., U. U.'. 'BBBB' becomes 'B. B., B. B.'.

  Structure the script in the following manner:
  
  1. A brief introduction and a statement that you are powered by Charles Schwab and mention that this podcast has been compiled from securities that the listener owns. Also, include a disclaimer that this podcast was "generated by generative AI", "should NOT be considered financial advice" and to "Please consult with your qualified Schwab advisor when making financial decisions"
  2. A segment for each security, making sure to use the special ticker formatting.
  3. A concluding remark.
  The script should be natural-sounding when read aloud. End the podcast with "That's your Market Minute update for today. Thanks for tuning in."
  
  FINANCIAL INTELLIGENCE:
  ${context}`;

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-pro',
    contents: prompt
  });
  
  return response.text;
}


export async function generatePodcastAudio(script: string, voice: string): Promise<string> {
  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash-preview-tts",
    contents: [{ parts: [{ text: script }] }],
    config: {
      responseModalities: [Modality.AUDIO],
      speechConfig: {
        voiceConfig: {
          prebuiltVoiceConfig: { voiceName: voice },
        },
      },
    },
  });

  const base64Audio = response.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;
  if (!base64Audio) {
    throw new Error("Audio data not found in Gemini response.");
  }
  return base64Audio;
}